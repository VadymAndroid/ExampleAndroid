// Generated by Dagger (https://google.github.io/dagger).
package ua.mycredit.mycredit.internal.di.modules;

import android.content.Context;
import com.google.firebase.analytics.FirebaseAnalytics;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class FirebaseModule_GetFirebaseAnalyticsFactory
    implements Factory<FirebaseAnalytics> {
  private final FirebaseModule module;

  private final Provider<Context> contextProvider;

  public FirebaseModule_GetFirebaseAnalyticsFactory(
      FirebaseModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public FirebaseAnalytics get() {
    return provideInstance(module, contextProvider);
  }

  public static FirebaseAnalytics provideInstance(
      FirebaseModule module, Provider<Context> contextProvider) {
    return proxyGetFirebaseAnalytics(module, contextProvider.get());
  }

  public static FirebaseModule_GetFirebaseAnalyticsFactory create(
      FirebaseModule module, Provider<Context> contextProvider) {
    return new FirebaseModule_GetFirebaseAnalyticsFactory(module, contextProvider);
  }

  public static FirebaseAnalytics proxyGetFirebaseAnalytics(
      FirebaseModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.getFirebaseAnalytics(context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
