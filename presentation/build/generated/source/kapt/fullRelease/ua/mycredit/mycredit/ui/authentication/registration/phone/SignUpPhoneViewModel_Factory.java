// Generated by Dagger (https://google.github.io/dagger).
package ua.mycredit.mycredit.ui.authentication.registration.phone;

import com.google.firebase.analytics.FirebaseAnalytics;
import dagger.internal.Factory;
import javax.inject.Provider;
import ru.terrakok.cicerone.Router;
import ua.mycredit.core.LocalStorage;
import ua.mycredit.core.Logouter;
import ua.mycredit.core.interactors.RequestSmsIfPhoneValidUseCase;
import ua.mycredit.core.interactors.SignInUseCase;
import ua.mycredit.core.internal.Logger;
import ua.mycredit.mycredit.AppEvents;
import ua.mycredit.mycredit.ui.MessagesMapper;
import ua.mycredit.mycredit.ui.bases.BaseViewModel_MembersInjector;
import ua.mycredit.mycredit.ui.bases.input.FormViewModel_MembersInjector;

public final class SignUpPhoneViewModel_Factory implements Factory<SignUpPhoneViewModel> {
  private final Provider<RequestSmsIfPhoneValidUseCase> requestSmsIfPhoneValidProvider;

  private final Provider<SignInUseCase> signInProvider;

  private final Provider<Router> routerProvider;

  private final Provider<AppEvents> eventsProvider;

  private final Provider<Logouter> logouterProvider;

  private final Provider<FirebaseAnalytics> analyticsProvider;

  private final Provider<MessagesMapper> messagesMapperProvider;

  private final Provider<LocalStorage> storageProvider;

  private final Provider<Logger> loggerProvider;

  public SignUpPhoneViewModel_Factory(
      Provider<RequestSmsIfPhoneValidUseCase> requestSmsIfPhoneValidProvider,
      Provider<SignInUseCase> signInProvider,
      Provider<Router> routerProvider,
      Provider<AppEvents> eventsProvider,
      Provider<Logouter> logouterProvider,
      Provider<FirebaseAnalytics> analyticsProvider,
      Provider<MessagesMapper> messagesMapperProvider,
      Provider<LocalStorage> storageProvider,
      Provider<Logger> loggerProvider) {
    this.requestSmsIfPhoneValidProvider = requestSmsIfPhoneValidProvider;
    this.signInProvider = signInProvider;
    this.routerProvider = routerProvider;
    this.eventsProvider = eventsProvider;
    this.logouterProvider = logouterProvider;
    this.analyticsProvider = analyticsProvider;
    this.messagesMapperProvider = messagesMapperProvider;
    this.storageProvider = storageProvider;
    this.loggerProvider = loggerProvider;
  }

  @Override
  public SignUpPhoneViewModel get() {
    return provideInstance(
        requestSmsIfPhoneValidProvider,
        signInProvider,
        routerProvider,
        eventsProvider,
        logouterProvider,
        analyticsProvider,
        messagesMapperProvider,
        storageProvider,
        loggerProvider);
  }

  public static SignUpPhoneViewModel provideInstance(
      Provider<RequestSmsIfPhoneValidUseCase> requestSmsIfPhoneValidProvider,
      Provider<SignInUseCase> signInProvider,
      Provider<Router> routerProvider,
      Provider<AppEvents> eventsProvider,
      Provider<Logouter> logouterProvider,
      Provider<FirebaseAnalytics> analyticsProvider,
      Provider<MessagesMapper> messagesMapperProvider,
      Provider<LocalStorage> storageProvider,
      Provider<Logger> loggerProvider) {
    SignUpPhoneViewModel instance =
        new SignUpPhoneViewModel(requestSmsIfPhoneValidProvider.get(), signInProvider.get());
    BaseViewModel_MembersInjector.injectRouter(instance, routerProvider.get());
    BaseViewModel_MembersInjector.injectEvents(instance, eventsProvider.get());
    BaseViewModel_MembersInjector.injectLogouter(instance, logouterProvider.get());
    BaseViewModel_MembersInjector.injectAnalytics(instance, analyticsProvider.get());
    BaseViewModel_MembersInjector.injectMessagesMapper(instance, messagesMapperProvider.get());
    BaseViewModel_MembersInjector.injectStorage(instance, storageProvider.get());
    BaseViewModel_MembersInjector.injectLogger(instance, loggerProvider.get());
    BaseViewModel_MembersInjector.injectBindToAppEvents(instance);
    FormViewModel_MembersInjector.injectInitFields(instance);
    return instance;
  }

  public static SignUpPhoneViewModel_Factory create(
      Provider<RequestSmsIfPhoneValidUseCase> requestSmsIfPhoneValidProvider,
      Provider<SignInUseCase> signInProvider,
      Provider<Router> routerProvider,
      Provider<AppEvents> eventsProvider,
      Provider<Logouter> logouterProvider,
      Provider<FirebaseAnalytics> analyticsProvider,
      Provider<MessagesMapper> messagesMapperProvider,
      Provider<LocalStorage> storageProvider,
      Provider<Logger> loggerProvider) {
    return new SignUpPhoneViewModel_Factory(
        requestSmsIfPhoneValidProvider,
        signInProvider,
        routerProvider,
        eventsProvider,
        logouterProvider,
        analyticsProvider,
        messagesMapperProvider,
        storageProvider,
        loggerProvider);
  }

  public static SignUpPhoneViewModel newSignUpPhoneViewModel(
      RequestSmsIfPhoneValidUseCase requestSmsIfPhoneValid, SignInUseCase signIn) {
    return new SignUpPhoneViewModel(requestSmsIfPhoneValid, signIn);
  }
}
