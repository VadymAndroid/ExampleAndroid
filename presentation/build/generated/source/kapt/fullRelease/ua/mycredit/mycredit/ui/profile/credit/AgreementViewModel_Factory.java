// Generated by Dagger (https://google.github.io/dagger).
package ua.mycredit.mycredit.ui.profile.credit;

import com.google.firebase.analytics.FirebaseAnalytics;
import dagger.internal.Factory;
import javax.inject.Provider;
import ru.terrakok.cicerone.Router;
import ua.mycredit.core.LocalStorage;
import ua.mycredit.core.Logouter;
import ua.mycredit.core.interactors.AcceptAgreementUseCase;
import ua.mycredit.core.interactors.CPAUseCase;
import ua.mycredit.core.interactors.GetAgreementUseCase;
import ua.mycredit.core.internal.Logger;
import ua.mycredit.mycredit.AppEvents;
import ua.mycredit.mycredit.ui.MessagesMapper;
import ua.mycredit.mycredit.ui.bases.BaseViewModel_MembersInjector;

public final class AgreementViewModel_Factory implements Factory<AgreementViewModel> {
  private final Provider<GetAgreementUseCase> getAgreementProvider;

  private final Provider<AcceptAgreementUseCase> acceptAgreementProvider;

  private final Provider<CPAUseCase> cpaUseCaseProvider;

  private final Provider<Router> routerProvider;

  private final Provider<AppEvents> eventsProvider;

  private final Provider<Logouter> logouterProvider;

  private final Provider<FirebaseAnalytics> analyticsProvider;

  private final Provider<MessagesMapper> messagesMapperProvider;

  private final Provider<LocalStorage> storageProvider;

  private final Provider<Logger> loggerProvider;

  public AgreementViewModel_Factory(
      Provider<GetAgreementUseCase> getAgreementProvider,
      Provider<AcceptAgreementUseCase> acceptAgreementProvider,
      Provider<CPAUseCase> cpaUseCaseProvider,
      Provider<Router> routerProvider,
      Provider<AppEvents> eventsProvider,
      Provider<Logouter> logouterProvider,
      Provider<FirebaseAnalytics> analyticsProvider,
      Provider<MessagesMapper> messagesMapperProvider,
      Provider<LocalStorage> storageProvider,
      Provider<Logger> loggerProvider) {
    this.getAgreementProvider = getAgreementProvider;
    this.acceptAgreementProvider = acceptAgreementProvider;
    this.cpaUseCaseProvider = cpaUseCaseProvider;
    this.routerProvider = routerProvider;
    this.eventsProvider = eventsProvider;
    this.logouterProvider = logouterProvider;
    this.analyticsProvider = analyticsProvider;
    this.messagesMapperProvider = messagesMapperProvider;
    this.storageProvider = storageProvider;
    this.loggerProvider = loggerProvider;
  }

  @Override
  public AgreementViewModel get() {
    return provideInstance(
        getAgreementProvider,
        acceptAgreementProvider,
        cpaUseCaseProvider,
        routerProvider,
        eventsProvider,
        logouterProvider,
        analyticsProvider,
        messagesMapperProvider,
        storageProvider,
        loggerProvider);
  }

  public static AgreementViewModel provideInstance(
      Provider<GetAgreementUseCase> getAgreementProvider,
      Provider<AcceptAgreementUseCase> acceptAgreementProvider,
      Provider<CPAUseCase> cpaUseCaseProvider,
      Provider<Router> routerProvider,
      Provider<AppEvents> eventsProvider,
      Provider<Logouter> logouterProvider,
      Provider<FirebaseAnalytics> analyticsProvider,
      Provider<MessagesMapper> messagesMapperProvider,
      Provider<LocalStorage> storageProvider,
      Provider<Logger> loggerProvider) {
    AgreementViewModel instance =
        new AgreementViewModel(
            getAgreementProvider.get(), acceptAgreementProvider.get(), cpaUseCaseProvider.get());
    BaseViewModel_MembersInjector.injectRouter(instance, routerProvider.get());
    BaseViewModel_MembersInjector.injectEvents(instance, eventsProvider.get());
    BaseViewModel_MembersInjector.injectLogouter(instance, logouterProvider.get());
    BaseViewModel_MembersInjector.injectAnalytics(instance, analyticsProvider.get());
    BaseViewModel_MembersInjector.injectMessagesMapper(instance, messagesMapperProvider.get());
    BaseViewModel_MembersInjector.injectStorage(instance, storageProvider.get());
    BaseViewModel_MembersInjector.injectLogger(instance, loggerProvider.get());
    BaseViewModel_MembersInjector.injectBindToAppEvents(instance);
    return instance;
  }

  public static AgreementViewModel_Factory create(
      Provider<GetAgreementUseCase> getAgreementProvider,
      Provider<AcceptAgreementUseCase> acceptAgreementProvider,
      Provider<CPAUseCase> cpaUseCaseProvider,
      Provider<Router> routerProvider,
      Provider<AppEvents> eventsProvider,
      Provider<Logouter> logouterProvider,
      Provider<FirebaseAnalytics> analyticsProvider,
      Provider<MessagesMapper> messagesMapperProvider,
      Provider<LocalStorage> storageProvider,
      Provider<Logger> loggerProvider) {
    return new AgreementViewModel_Factory(
        getAgreementProvider,
        acceptAgreementProvider,
        cpaUseCaseProvider,
        routerProvider,
        eventsProvider,
        logouterProvider,
        analyticsProvider,
        messagesMapperProvider,
        storageProvider,
        loggerProvider);
  }

  public static AgreementViewModel newAgreementViewModel(
      GetAgreementUseCase getAgreement,
      AcceptAgreementUseCase acceptAgreement,
      CPAUseCase cpaUseCase) {
    return new AgreementViewModel(getAgreement, acceptAgreement, cpaUseCase);
  }
}
