// Generated by Dagger (https://google.github.io/dagger).
package ua.mycredit.core;

import dagger.MembersInjector;
import io.reactivex.Scheduler;
import java.util.Map;
import javax.inject.Provider;
import ua.mycredit.core.internal.AppMetaData;
import ua.mycredit.core.internal.Logger;

public final class BaseUseCase_MembersInjector implements MembersInjector<BaseUseCase> {
  private final Provider<NetworkFacade> networkFacadeProvider;

  private final Provider<LocalStorage> localStorageProvider;

  private final Provider<Map<BaseUseCase.SchedulerType, ? extends Scheduler>> schedulersProvider;

  private final Provider<Logger> loggerProvider;

  private final Provider<AppMetaData> appMetaDataProvider;

  public BaseUseCase_MembersInjector(
      Provider<NetworkFacade> networkFacadeProvider,
      Provider<LocalStorage> localStorageProvider,
      Provider<Map<BaseUseCase.SchedulerType, ? extends Scheduler>> schedulersProvider,
      Provider<Logger> loggerProvider,
      Provider<AppMetaData> appMetaDataProvider) {
    this.networkFacadeProvider = networkFacadeProvider;
    this.localStorageProvider = localStorageProvider;
    this.schedulersProvider = schedulersProvider;
    this.loggerProvider = loggerProvider;
    this.appMetaDataProvider = appMetaDataProvider;
  }

  public static MembersInjector<BaseUseCase> create(
      Provider<NetworkFacade> networkFacadeProvider,
      Provider<LocalStorage> localStorageProvider,
      Provider<Map<BaseUseCase.SchedulerType, ? extends Scheduler>> schedulersProvider,
      Provider<Logger> loggerProvider,
      Provider<AppMetaData> appMetaDataProvider) {
    return new BaseUseCase_MembersInjector(
        networkFacadeProvider,
        localStorageProvider,
        schedulersProvider,
        loggerProvider,
        appMetaDataProvider);
  }

  @Override
  public void injectMembers(BaseUseCase instance) {
    injectNetworkFacade(instance, networkFacadeProvider.get());
    injectLocalStorage(instance, localStorageProvider.get());
    injectSchedulers(instance, schedulersProvider.get());
    injectLogger(instance, loggerProvider.get());
    injectAppMetaData(instance, appMetaDataProvider.get());
  }

  public static void injectNetworkFacade(BaseUseCase instance, NetworkFacade networkFacade) {
    instance.networkFacade = networkFacade;
  }

  public static void injectLocalStorage(BaseUseCase instance, LocalStorage localStorage) {
    instance.localStorage = localStorage;
  }

  public static void injectSchedulers(
      BaseUseCase instance, Map<BaseUseCase.SchedulerType, ? extends Scheduler> schedulers) {
    instance.schedulers = schedulers;
  }

  public static void injectLogger(BaseUseCase instance, Logger logger) {
    instance.logger = logger;
  }

  public static void injectAppMetaData(BaseUseCase instance, AppMetaData appMetaData) {
    instance.appMetaData = appMetaData;
  }
}
