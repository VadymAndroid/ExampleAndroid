// Generated by Dagger (https://google.github.io/dagger).
package ua.mycredit.core.interactors;

import dagger.internal.Factory;
import io.reactivex.Scheduler;
import java.util.Map;
import javax.inject.Provider;
import ua.mycredit.core.BaseUseCase;
import ua.mycredit.core.BaseUseCase_MembersInjector;
import ua.mycredit.core.LocalStorage;
import ua.mycredit.core.NetworkFacade;
import ua.mycredit.core.ProfileRepo;
import ua.mycredit.core.internal.AppMetaData;
import ua.mycredit.core.internal.Logger;

public final class LoadProfileUseCase_Factory implements Factory<LoadProfileUseCase> {
  private final Provider<ProfileRepo> arg0Provider;

  private final Provider<NetworkFacade> networkFacadeProvider;

  private final Provider<LocalStorage> localStorageProvider;

  private final Provider<Map<BaseUseCase.SchedulerType, ? extends Scheduler>> schedulersProvider;

  private final Provider<Logger> loggerProvider;

  private final Provider<AppMetaData> appMetaDataProvider;

  public LoadProfileUseCase_Factory(
      Provider<ProfileRepo> arg0Provider,
      Provider<NetworkFacade> networkFacadeProvider,
      Provider<LocalStorage> localStorageProvider,
      Provider<Map<BaseUseCase.SchedulerType, ? extends Scheduler>> schedulersProvider,
      Provider<Logger> loggerProvider,
      Provider<AppMetaData> appMetaDataProvider) {
    this.arg0Provider = arg0Provider;
    this.networkFacadeProvider = networkFacadeProvider;
    this.localStorageProvider = localStorageProvider;
    this.schedulersProvider = schedulersProvider;
    this.loggerProvider = loggerProvider;
    this.appMetaDataProvider = appMetaDataProvider;
  }

  @Override
  public LoadProfileUseCase get() {
    return provideInstance(
        arg0Provider,
        networkFacadeProvider,
        localStorageProvider,
        schedulersProvider,
        loggerProvider,
        appMetaDataProvider);
  }

  public static LoadProfileUseCase provideInstance(
      Provider<ProfileRepo> arg0Provider,
      Provider<NetworkFacade> networkFacadeProvider,
      Provider<LocalStorage> localStorageProvider,
      Provider<Map<BaseUseCase.SchedulerType, ? extends Scheduler>> schedulersProvider,
      Provider<Logger> loggerProvider,
      Provider<AppMetaData> appMetaDataProvider) {
    LoadProfileUseCase instance = new LoadProfileUseCase(arg0Provider.get());
    BaseUseCase_MembersInjector.injectNetworkFacade(instance, networkFacadeProvider.get());
    BaseUseCase_MembersInjector.injectLocalStorage(instance, localStorageProvider.get());
    BaseUseCase_MembersInjector.injectSchedulers(instance, schedulersProvider.get());
    BaseUseCase_MembersInjector.injectLogger(instance, loggerProvider.get());
    BaseUseCase_MembersInjector.injectAppMetaData(instance, appMetaDataProvider.get());
    return instance;
  }

  public static LoadProfileUseCase_Factory create(
      Provider<ProfileRepo> arg0Provider,
      Provider<NetworkFacade> networkFacadeProvider,
      Provider<LocalStorage> localStorageProvider,
      Provider<Map<BaseUseCase.SchedulerType, ? extends Scheduler>> schedulersProvider,
      Provider<Logger> loggerProvider,
      Provider<AppMetaData> appMetaDataProvider) {
    return new LoadProfileUseCase_Factory(
        arg0Provider,
        networkFacadeProvider,
        localStorageProvider,
        schedulersProvider,
        loggerProvider,
        appMetaDataProvider);
  }

  public static LoadProfileUseCase newLoadProfileUseCase(ProfileRepo arg0) {
    return new LoadProfileUseCase(arg0);
  }
}
