// Generated by Dagger (https://google.github.io/dagger).
package ua.mycredit.mycredit.internal.di.modules;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import ru.terrakok.cicerone.NavigatorHolder;

public final class RouterModule_ProvideNavigatorHolderFactory implements Factory<NavigatorHolder> {
  private final RouterModule module;

  public RouterModule_ProvideNavigatorHolderFactory(RouterModule module) {
    this.module = module;
  }

  @Override
  public NavigatorHolder get() {
    return provideInstance(module);
  }

  public static NavigatorHolder provideInstance(RouterModule module) {
    return proxyProvideNavigatorHolder(module);
  }

  public static RouterModule_ProvideNavigatorHolderFactory create(RouterModule module) {
    return new RouterModule_ProvideNavigatorHolderFactory(module);
  }

  public static NavigatorHolder proxyProvideNavigatorHolder(RouterModule instance) {
    return Preconditions.checkNotNull(
        instance.provideNavigatorHolder(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
