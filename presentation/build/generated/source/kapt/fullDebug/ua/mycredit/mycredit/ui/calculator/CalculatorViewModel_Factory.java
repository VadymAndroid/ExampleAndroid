// Generated by Dagger (https://google.github.io/dagger).
package ua.mycredit.mycredit.ui.calculator;

import com.google.firebase.analytics.FirebaseAnalytics;
import dagger.internal.Factory;
import javax.inject.Provider;
import ru.terrakok.cicerone.Router;
import ua.mycredit.core.LocalStorage;
import ua.mycredit.core.Logouter;
import ua.mycredit.core.interactors.ApplyForCreditUseCase;
import ua.mycredit.core.interactors.CPAUseCase;
import ua.mycredit.core.interactors.GetProductByPromoCodeUseCase;
import ua.mycredit.core.internal.Logger;
import ua.mycredit.mycredit.AppEvents;
import ua.mycredit.mycredit.ui.MessagesMapper;
import ua.mycredit.mycredit.ui.bases.BaseViewModel_MembersInjector;

public final class CalculatorViewModel_Factory implements Factory<CalculatorViewModel> {
  private final Provider<GetProductByPromoCodeUseCase> getProductByPromoCodeProvider;

  private final Provider<ApplyForCreditUseCase> applyForCreditProvider;

  private final Provider<CPAUseCase> cpaUseCaseProvider;

  private final Provider<Router> routerProvider;

  private final Provider<AppEvents> eventsProvider;

  private final Provider<Logouter> logouterProvider;

  private final Provider<FirebaseAnalytics> analyticsProvider;

  private final Provider<MessagesMapper> messagesMapperProvider;

  private final Provider<LocalStorage> storageProvider;

  private final Provider<Logger> loggerProvider;

  public CalculatorViewModel_Factory(
      Provider<GetProductByPromoCodeUseCase> getProductByPromoCodeProvider,
      Provider<ApplyForCreditUseCase> applyForCreditProvider,
      Provider<CPAUseCase> cpaUseCaseProvider,
      Provider<Router> routerProvider,
      Provider<AppEvents> eventsProvider,
      Provider<Logouter> logouterProvider,
      Provider<FirebaseAnalytics> analyticsProvider,
      Provider<MessagesMapper> messagesMapperProvider,
      Provider<LocalStorage> storageProvider,
      Provider<Logger> loggerProvider) {
    this.getProductByPromoCodeProvider = getProductByPromoCodeProvider;
    this.applyForCreditProvider = applyForCreditProvider;
    this.cpaUseCaseProvider = cpaUseCaseProvider;
    this.routerProvider = routerProvider;
    this.eventsProvider = eventsProvider;
    this.logouterProvider = logouterProvider;
    this.analyticsProvider = analyticsProvider;
    this.messagesMapperProvider = messagesMapperProvider;
    this.storageProvider = storageProvider;
    this.loggerProvider = loggerProvider;
  }

  @Override
  public CalculatorViewModel get() {
    return provideInstance(
        getProductByPromoCodeProvider,
        applyForCreditProvider,
        cpaUseCaseProvider,
        routerProvider,
        eventsProvider,
        logouterProvider,
        analyticsProvider,
        messagesMapperProvider,
        storageProvider,
        loggerProvider);
  }

  public static CalculatorViewModel provideInstance(
      Provider<GetProductByPromoCodeUseCase> getProductByPromoCodeProvider,
      Provider<ApplyForCreditUseCase> applyForCreditProvider,
      Provider<CPAUseCase> cpaUseCaseProvider,
      Provider<Router> routerProvider,
      Provider<AppEvents> eventsProvider,
      Provider<Logouter> logouterProvider,
      Provider<FirebaseAnalytics> analyticsProvider,
      Provider<MessagesMapper> messagesMapperProvider,
      Provider<LocalStorage> storageProvider,
      Provider<Logger> loggerProvider) {
    CalculatorViewModel instance =
        new CalculatorViewModel(
            getProductByPromoCodeProvider.get(),
            applyForCreditProvider.get(),
            cpaUseCaseProvider.get());
    BaseViewModel_MembersInjector.injectRouter(instance, routerProvider.get());
    BaseViewModel_MembersInjector.injectEvents(instance, eventsProvider.get());
    BaseViewModel_MembersInjector.injectLogouter(instance, logouterProvider.get());
    BaseViewModel_MembersInjector.injectAnalytics(instance, analyticsProvider.get());
    BaseViewModel_MembersInjector.injectMessagesMapper(instance, messagesMapperProvider.get());
    BaseViewModel_MembersInjector.injectStorage(instance, storageProvider.get());
    BaseViewModel_MembersInjector.injectLogger(instance, loggerProvider.get());
    BaseViewModel_MembersInjector.injectBindToAppEvents(instance);
    CalculatorViewModel_MembersInjector.injectOnInjected(instance);
    return instance;
  }

  public static CalculatorViewModel_Factory create(
      Provider<GetProductByPromoCodeUseCase> getProductByPromoCodeProvider,
      Provider<ApplyForCreditUseCase> applyForCreditProvider,
      Provider<CPAUseCase> cpaUseCaseProvider,
      Provider<Router> routerProvider,
      Provider<AppEvents> eventsProvider,
      Provider<Logouter> logouterProvider,
      Provider<FirebaseAnalytics> analyticsProvider,
      Provider<MessagesMapper> messagesMapperProvider,
      Provider<LocalStorage> storageProvider,
      Provider<Logger> loggerProvider) {
    return new CalculatorViewModel_Factory(
        getProductByPromoCodeProvider,
        applyForCreditProvider,
        cpaUseCaseProvider,
        routerProvider,
        eventsProvider,
        logouterProvider,
        analyticsProvider,
        messagesMapperProvider,
        storageProvider,
        loggerProvider);
  }

  public static CalculatorViewModel newCalculatorViewModel(
      GetProductByPromoCodeUseCase getProductByPromoCode,
      ApplyForCreditUseCase applyForCredit,
      CPAUseCase cpaUseCase) {
    return new CalculatorViewModel(getProductByPromoCode, applyForCredit, cpaUseCase);
  }
}
