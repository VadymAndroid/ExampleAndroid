// Generated by Dagger (https://google.github.io/dagger).
package ua.mycredit.mycredit.ui.profile.credit;

import com.google.firebase.analytics.FirebaseAnalytics;
import dagger.internal.Factory;
import javax.inject.Provider;
import ru.terrakok.cicerone.Router;
import ua.mycredit.core.LocalStorage;
import ua.mycredit.core.Logouter;
import ua.mycredit.core.interactors.GetContractAdditionsUseCase;
import ua.mycredit.core.interactors.GetStatusUseCase;
import ua.mycredit.core.interactors.PhoneContactsUseCase;
import ua.mycredit.core.interactors.RestructureCreditUseCase;
import ua.mycredit.core.internal.Logger;
import ua.mycredit.mycredit.AppEvents;
import ua.mycredit.mycredit.ui.MessagesMapper;
import ua.mycredit.mycredit.ui.bases.BaseViewModel_MembersInjector;

public final class StatusViewModel_Factory implements Factory<StatusViewModel> {
  private final Provider<GetStatusUseCase> getStatusProvider;

  private final Provider<GetContractAdditionsUseCase> getContractAdditionsProvider;

  private final Provider<RestructureCreditUseCase> restructureCreditProvider;

  private final Provider<PhoneContactsUseCase> phoneContactsUseCaseProvider;

  private final Provider<Router> routerProvider;

  private final Provider<AppEvents> eventsProvider;

  private final Provider<Logouter> logouterProvider;

  private final Provider<FirebaseAnalytics> analyticsProvider;

  private final Provider<MessagesMapper> messagesMapperProvider;

  private final Provider<LocalStorage> storageProvider;

  private final Provider<Logger> loggerProvider;

  public StatusViewModel_Factory(
      Provider<GetStatusUseCase> getStatusProvider,
      Provider<GetContractAdditionsUseCase> getContractAdditionsProvider,
      Provider<RestructureCreditUseCase> restructureCreditProvider,
      Provider<PhoneContactsUseCase> phoneContactsUseCaseProvider,
      Provider<Router> routerProvider,
      Provider<AppEvents> eventsProvider,
      Provider<Logouter> logouterProvider,
      Provider<FirebaseAnalytics> analyticsProvider,
      Provider<MessagesMapper> messagesMapperProvider,
      Provider<LocalStorage> storageProvider,
      Provider<Logger> loggerProvider) {
    this.getStatusProvider = getStatusProvider;
    this.getContractAdditionsProvider = getContractAdditionsProvider;
    this.restructureCreditProvider = restructureCreditProvider;
    this.phoneContactsUseCaseProvider = phoneContactsUseCaseProvider;
    this.routerProvider = routerProvider;
    this.eventsProvider = eventsProvider;
    this.logouterProvider = logouterProvider;
    this.analyticsProvider = analyticsProvider;
    this.messagesMapperProvider = messagesMapperProvider;
    this.storageProvider = storageProvider;
    this.loggerProvider = loggerProvider;
  }

  @Override
  public StatusViewModel get() {
    return provideInstance(
        getStatusProvider,
        getContractAdditionsProvider,
        restructureCreditProvider,
        phoneContactsUseCaseProvider,
        routerProvider,
        eventsProvider,
        logouterProvider,
        analyticsProvider,
        messagesMapperProvider,
        storageProvider,
        loggerProvider);
  }

  public static StatusViewModel provideInstance(
      Provider<GetStatusUseCase> getStatusProvider,
      Provider<GetContractAdditionsUseCase> getContractAdditionsProvider,
      Provider<RestructureCreditUseCase> restructureCreditProvider,
      Provider<PhoneContactsUseCase> phoneContactsUseCaseProvider,
      Provider<Router> routerProvider,
      Provider<AppEvents> eventsProvider,
      Provider<Logouter> logouterProvider,
      Provider<FirebaseAnalytics> analyticsProvider,
      Provider<MessagesMapper> messagesMapperProvider,
      Provider<LocalStorage> storageProvider,
      Provider<Logger> loggerProvider) {
    StatusViewModel instance =
        new StatusViewModel(
            getStatusProvider.get(),
            getContractAdditionsProvider.get(),
            restructureCreditProvider.get(),
            phoneContactsUseCaseProvider.get());
    BaseViewModel_MembersInjector.injectRouter(instance, routerProvider.get());
    BaseViewModel_MembersInjector.injectEvents(instance, eventsProvider.get());
    BaseViewModel_MembersInjector.injectLogouter(instance, logouterProvider.get());
    BaseViewModel_MembersInjector.injectAnalytics(instance, analyticsProvider.get());
    BaseViewModel_MembersInjector.injectMessagesMapper(instance, messagesMapperProvider.get());
    BaseViewModel_MembersInjector.injectStorage(instance, storageProvider.get());
    BaseViewModel_MembersInjector.injectLogger(instance, loggerProvider.get());
    BaseViewModel_MembersInjector.injectBindToAppEvents(instance);
    StatusViewModel_MembersInjector.injectOnInjected(instance);
    return instance;
  }

  public static StatusViewModel_Factory create(
      Provider<GetStatusUseCase> getStatusProvider,
      Provider<GetContractAdditionsUseCase> getContractAdditionsProvider,
      Provider<RestructureCreditUseCase> restructureCreditProvider,
      Provider<PhoneContactsUseCase> phoneContactsUseCaseProvider,
      Provider<Router> routerProvider,
      Provider<AppEvents> eventsProvider,
      Provider<Logouter> logouterProvider,
      Provider<FirebaseAnalytics> analyticsProvider,
      Provider<MessagesMapper> messagesMapperProvider,
      Provider<LocalStorage> storageProvider,
      Provider<Logger> loggerProvider) {
    return new StatusViewModel_Factory(
        getStatusProvider,
        getContractAdditionsProvider,
        restructureCreditProvider,
        phoneContactsUseCaseProvider,
        routerProvider,
        eventsProvider,
        logouterProvider,
        analyticsProvider,
        messagesMapperProvider,
        storageProvider,
        loggerProvider);
  }

  public static StatusViewModel newStatusViewModel(
      GetStatusUseCase getStatus,
      GetContractAdditionsUseCase getContractAdditions,
      RestructureCreditUseCase restructureCredit,
      PhoneContactsUseCase phoneContactsUseCase) {
    return new StatusViewModel(
        getStatus, getContractAdditions, restructureCredit, phoneContactsUseCase);
  }
}
